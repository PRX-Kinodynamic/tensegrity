<launch>
	<arg name="img_directory"/>

  <arg name="output_dir" default="$(env TENSEGRITY_ROS)/data/test/"/>
  <arg name="filename_prefix" default="test"/>
  <arg name="visualize" default="true"/>
  <arg name="collect_all_videos" default="false"/>
  <arg name="collect_overlay_video" default="false"/>
  
  <arg name="use_cable_sensors" default="true"/>
  
  <arg name="shape_only_estimation" default="false"/>
  <arg name="snapshot_estimation" default="false"/>
  <arg name="ekf_estimation" default="false"/>
  <arg name="traj_estimation" default="false"/>

  <arg name="autostart_vision_only" default="false"/>
  <arg name="autostart_shape_estimation" default="false"/>

	<include file="$(find perception)/launch/tensegrity_from_imgs.launch">
    <arg name="img_directory" default="$(arg img_directory)"/>
    <arg name="loop" default="false"/>
  	<arg name="max_images" default="1"/>
  	<arg name="sim_clock" default="false"/>
  	<arg name="output_dir" default="$(arg output_dir)"/>
  	<arg name="filename_prefix" default="$(arg filename_prefix)_gt"/>
  	<arg name="output_to_file" default="true"/>
  </include>

	<!-- Get the endcaps by color from images -->
	<include file="$(find perception)/launch/tensegrity_estimation.launch">
	</include>

  <include if="$(arg shape_only_estimation)" 
           file="$(find estimation)/launch/shape_only_estimation.launch">
    <arg name="visualize" default="$(arg visualize)"/>
    <arg name="cable_unit_conversion" default="0.001"/>
    <arg name="cable_map_filename" default="$(arg img_directory)/cable_map.txt"/>
  </include>

	<!-- Snapshot estimation (no history) -->
	<include if="$(arg snapshot_estimation)" 
					 file="$(find estimation)/launch/state_estimation.launch">
		<arg name="use_cable_sensors" default="$(arg use_cable_sensors)"/>
		<arg name="frame" default="world"/>
    <arg name="visualize" default="$(arg visualize)"/>
    <arg name="cable_unit_conversion" default="0.001"/>
    <arg name="cable_map_filename" default="$(arg img_directory)/cable_map.txt"/>
    <arg name="initial_estimate_filename" default="$(arg img_directory)/initial_estimate.txt"/>
	</include>

  <include if="$(arg ekf_estimation)" 
           file="$(find estimation)/launch/ekf_estimation.launch">
    <arg name="use_cable_sensors" default="$(arg use_cable_sensors)"/>
    <!-- <arg name="frame" default="world"/> -->
    <arg name="cable_unit_conversion" default="0.001"/>
    <arg name="cable_map_filename" default="$(arg img_directory)/cable_map.txt"/>
    <arg name="initial_estimate_filename" default="$(arg img_directory)/initial_estimate.txt"/>
    <!-- <arg name="visualize" default="$(arg visualize)"/> -->
  </include>

  <include if="$(arg traj_estimation)" 
           file="$(find estimation)/launch/traj_estimation.launch">
    <arg name="use_cable_sensors" default="$(arg use_cable_sensors)"/>
    <arg name="cable_unit_conversion" default="0.001"/>
    <arg name="cable_map_filename" default="$(arg img_directory)/cable_map.txt"/>
    <arg name="initial_estimate_filename" default="$(arg img_directory)/initial_estimate.txt"/>
    <!-- <arg name="visualize" default="$(arg visualize)"/> -->
  </include>


	<node pkg="nodelet" type="nodelet" name="data_collection_nodelet"  args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="TensegrityBarsToFile" required="true"
        args="load interface/TensegrityBarsToFile data_collection_nodelet" output="screen">
        <param name="node_id" value="/nodes/bars_to_file"/>
        <param name="poses_filename" value="$(arg output_dir)/$(arg filename_prefix)_estimated_poses.txt"/>
        <param name="endcap_filename" value="$(arg output_dir)/$(arg filename_prefix)_estimated_endcap.txt"/>
        <param name="tensegrity_bars_topicname" value="/tensegrity/poses"/>
    </node>

  <node if="$(arg collect_overlay_video)" pkg="perception" type="topic_to_video" name="topic_to_video">
    <param name="image_topic" value="/tensegrity/estimation/overlay"/>
    <param name="video_directory" value="$(arg output_dir)"/>
    <param name="width" value="640"/>
    <param name="height" value="480"/>
    <param name="video_id" value="$(arg filename_prefix)_overlay"/>
  </node>

  <include if="$(arg collect_all_videos)" file="$(find interface)/launch/collect_all_images.launch">
    <arg name="color" default="red"/>
    <arg name="filename_prefix" default="$(arg filename_prefix)"/>
    <arg name="output_dir" default="$(arg output_dir)"/>
  </include>

  <include if="$(arg collect_all_videos)" file="$(find interface)/launch/collect_all_images.launch">
    <arg name="color" default="green"/>
    <arg name="filename_prefix" default="$(arg filename_prefix)"/>
    <arg name="output_dir" default="$(arg output_dir)"/>
  </include>

  <include if="$(arg collect_all_videos)" file="$(find interface)/launch/collect_all_images.launch">
    <arg name="color" default="blue"/>
    <arg name="filename_prefix" default="$(arg filename_prefix)"/>
    <arg name="output_dir" default="$(arg output_dir)"/>
  </include>

  <!-- Collect status of all viz-related nodes into a single one -->
  <node pkg="interface" type="status_funnel.py" name="viz_sim_data_status_funnel">
    <param name="output_topic" value="/nodes/camera"/>
    <param name="node_status_topics" type="yaml" 
        value="[
          /nodes/Positions/blue/status/current,
          /nodes/Positions/green/status/current,
          /nodes/Positions/red/status/current,
          /nodes/BlackColorFilterred/status/current,
          /nodes/ColorFilterred/status/current,
          /nodes/BlackColorFiltergreen/status/current,
          /nodes/ColorFiltergreen/status/current,
          /nodes/BlackColorFilterblue/status/current,
          /nodes/ColorFilterblue/status/current,
          ]"
        />
  </node>

  <node pkg="interface" type="tensegrity_topics_to_files.py" name="tensegrity_topics_to_files">
    <param name="file_prefix" value="$(arg output_dir)/$(arg filename_prefix)"/>
    <param name="red_positions_topic" value="/tensegrity/endcap/red/positions"/>
    <param name="green_positions_topic" value="/tensegrity/endcap/blue/positions"/>
    <param name="blue_positions_topic" value="/tensegrity/endcap/green/positions"/>
  </node>

  <node if="$(arg autostart_vision_only)" pkg="interface" type="status_wait_and_run.py" name="status_wait_and_run" output="screen">
    <param name="nodes_to_wait" type="yaml" 
        value="[
          /nodes/camera/status/current,
          ]"
        />

    <param name="nodes_to_run" type="yaml" 
        value="[
          /nodes/playback/status/change
          ]"
        />
  </node>

  <node if="$(arg autostart_shape_estimation)" pkg="interface" type="status_wait_and_run.py" name="status_wait_and_run" output="screen">
    <param name="nodes_to_wait" type="yaml" 
        value="[
          /nodes/camera/status/current,
          /nodes/bars_to_file/status/current
          ]"
        />

    <param name="nodes_to_run" type="yaml" 
        value="[
          /nodes/playback/status/change
          ]"
        />
  </node>

</launch>